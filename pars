from collections import defaultdict
import json

def cast_value(value, value_type):
    if value is None:
        return None
    try:
        if value_type.lower() == 'integer':
            return int(value)
        elif value_type.lower() == 'float':
            return float(value)
        elif value_type.lower() == 'boolean':
            return str(value).lower() == 'true'
        else:
            return str(value)
    except Exception:
        return value

def build_static_threshold(db_conn):
    query = """
    SELECT 
    tm.TSHLD_SET_NAME,
    th.TSHLD_TYPE,
    th.TSHLD_NAME,
    th.THSLD_VALUE,
    th.VALUE_TYPE,
    th.TSHLD_ID,
    th.TSHLD_SET_ID,
    (CAST(th.TSHLD_ID AS VARCHAR(100)) || '_' || CAST(th.TSHLD_SET_ID AS VARCHAR(100))) AS COMPOSITE_KEY
FROM 
    THRESHOLDS_MASTER tm
JOIN 
    THRESHOLD_SET ts 
    ON tm.TSHLD_SET_TEMPLATE_ID = ts.TSHLD_SET_TEMPLATE_ID
JOIN 
    THRESHOLDS th 
    ON tm.TSHLD_ID = th.TSHLD_ID AND ts.TSHLD_SET_ID = th.TSHLD_SET_ID

    """

    # Execute the query using your existing mechanism
    db_conn.execute_query(query)

    # --- Now fetch rows from the cursor
    if db_conn.pool_conn:
        # If using connection pool, acquire new connection temporarily to fetch cursor
        with db_conn.conn.acquire() as connection:
            with connection.cursor() as cursor:
                rows = cursor.fetchall()
                columns = [col[0] for col in cursor.description]
    else:
        cursor = db_conn.cur
        rows = cursor.fetchall()
        columns = [col[0] for col in cursor.description]

    # Index mapping
    set_name_idx = columns.index("TSHLD_SET_NAME")
    type_idx = columns.index("TSHLD_TYPE")
    name_idx = columns.index("TSHLD_NAME")
    value_idx = columns.index("THSLD_VALUE")
    value_type_idx = columns.index("VALUE_TYPE")

    # Build the nested dictionary
    static_threshold = defaultdict(lambda: defaultdict(dict))
    for row in rows:
        set_name = row[set_name_idx]
        tshld_type = row[type_idx]
        tshld_name = row[name_idx]
        value_raw = row[value_idx]
        value_type = row[value_type_idx]

        casted_value = cast_value(value_raw, value_type)
        static_threshold[set_name][tshld_type][tshld_name] = casted_value

    return json.loads(json.dumps(static_threshold))  # Convert to regular dict for JSON use



def build_column_selection_expression(columns: List[str]) -> str:
        select_exprs = []
        for col in columns:
            ds, col_name = col.split(":", maxsplit=1)
            expr = (
                f"pl.col('{col_name}') if '{col_name}' in joined_df.columns "
                f"else pl.col('{col_name}_{ds}')"
            )
            select_exprs.append(expr)
        inner_expr = ", ".join(select_exprs)
        return f".select([{inner_expr}])"

    columns = pxml_event_level.get("RetainedColumns", {}).get("Column", [])
    dataset_map = extract_dataset(columns)

    join_expr = build_join_expression(dataset_map)
    col_select_expr = build_column_selection_expression(columns)

    return join_expr, col_select_expr


def dict_to_struct_expr(d: dict):
    return pl.struct({k: pl.lit(v) for k, v in d.items()})


import polars as pl
from collections import defaultdict
import json

def build_static_threshold_from_df(df: pl.DataFrame):
    static_threshold = defaultdict(lambda: defaultdict(dict))

    for row in df.iter_rows(named=True):
        set_name = row["TSHLD_SET_NAME"]
        tshld_type = row["TSHLD_TYPE"]
        tshld_name = row["TSHLD_NAME"]
        value_raw = row["THSLD_VALUE"]
        value_type = row["VALUE_TYPE"]

        casted_value = cast_value(value_raw, value_type)
        static_threshold[set_name][tshld_type][tshld_name] = casted_value

    return json.loads(json.dumps(static_threshold))


import polars as pl
import random

# Random seed for reproducibility
random.seed(42)

# Reference lists for testing
animals_ref = ["cat", "dog", "lion", "tiger", "wolf"]
tags_ref = ["ml", "ai", "cv", "nlp", "robotics"]

# Generate sample data
n = 1000
df = pl.DataFrame({
    "animal": [random.choice(animals_ref + ["elephant", "bear", "fox"]) for _ in range(n)],
    "tags": [random.sample(tags_ref + ["math", "bio", "chem", "astro"], k=random.randint(0, 5)) for _ in range(n)]
})