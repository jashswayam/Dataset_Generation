from collections import defaultdict
import json

def cast_value(value, value_type):
    if value is None:
        return None
    try:
        if value_type.lower() == 'integer':
            return int(value)
        elif value_type.lower() == 'float':
            return float(value)
        elif value_type.lower() == 'boolean':
            return str(value).lower() == 'true'
        else:
            return str(value)
    except Exception:
        return value

def build_static_threshold(db_conn):
    query = """
    SELECT 
        tm.TSHLD_SET_NAME,
        th.TSHLD_TYPE,
        th.TSHLD_NAME,
        th.THSLD_VALUE,
        th.VALUE_TYPE
    FROM 
        THRESHOLDS_MASTER tm
    JOIN 
        THRESHOLD_SET ts 
        ON tm.TSHLD_SET_TEMPLATE_ID = ts.TSHLD_SET_TEMPLATE_ID
    JOIN 
        THRESHOLDS th 
        ON ts.TSHLD_SET_ID = th.TSHLD_SET_ID
    """

    # Execute the query using your existing mechanism
    db_conn.execute_query(query)

    # --- Now fetch rows from the cursor
    if db_conn.pool_conn:
        # If using connection pool, acquire new connection temporarily to fetch cursor
        with db_conn.conn.acquire() as connection:
            with connection.cursor() as cursor:
                rows = cursor.fetchall()
                columns = [col[0] for col in cursor.description]
    else:
        cursor = db_conn.cur
        rows = cursor.fetchall()
        columns = [col[0] for col in cursor.description]

    # Index mapping
    set_name_idx = columns.index("TSHLD_SET_NAME")
    type_idx = columns.index("TSHLD_TYPE")
    name_idx = columns.index("TSHLD_NAME")
    value_idx = columns.index("THSLD_VALUE")
    value_type_idx = columns.index("VALUE_TYPE")

    # Build the nested dictionary
    static_threshold = defaultdict(lambda: defaultdict(dict))
    for row in rows:
        set_name = row[set_name_idx]
        tshld_type = row[type_idx]
        tshld_name = row[name_idx]
        value_raw = row[value_idx]
        value_type = row[value_type_idx]

        casted_value = cast_value(value_raw, value_type)
        static_threshold[set_name][tshld_type][tshld_name] = casted_value

    return json.loads(json.dumps(static_threshold))  # Convert to regular dict for JSON use
